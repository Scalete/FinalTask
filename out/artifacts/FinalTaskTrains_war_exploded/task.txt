Железнодорожная касса

Администратор может добавлять/удалять/редактировать список Станций и железнодорожных Маршрутов между ними. Маршрут
включает в себя информацию:

* начальная станция и время отправления;
* конечная станция и время прибытия;
* список промежуточных станций, и время прибытия/стоянки/отправления для каждой из них.

Пользователь может осуществить поиск маршрутов между интересующими его станциями. Результат поиска должен представлять
из себя список поездов, каждая строка которого содержит:

* номер поезда;
* время/дату и станцию отправления;
* время в пути;
* время/дату и станцию прибытия;
* количество свободных мест (отдельно по видам: купе, плацкарт, общий);
* стоимость проезда;
* ссылку на страницу просмотра соответствующего маршрута (пользователь может посмотреть информацию о маршруте).

Если пользователь зарегистрирован в системе, то он должен иметь возможность купить билет на
выбранный поезд в выбранный вагон (при условии наличия свободных мест).

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Summary Task4

Задание

Задача сформулирована следующим образом.

Разработать WEB-приложение, которое поддерживает заданную функциональность. Требования к реализации следующие.

1. На основе сущностей предметной области создать классы которые им соответствуют.
2. Классы и методы должны иметь именования, которые отражают их функциональность, и должны быть
грамотно разнесены по пакетам.
3. Оформление кода должно соответствовать Java Code Convention.
4. Информацию о предметной области хранить в базе данных (в качестве СУБД рекомендуется
использовать MySQL).
5. Для доступа к данным использовать API JDBC с использованием пула соединений (не допускается
использование ОRM Hibernate, Toplink и т.п.).
6. Приложение должно поддерживать работу с кириллицей (быть многоязычным), в том числе при  хранении информации в БД:
должна быть возможность переключения языка интерфейса; должна быть поддержка ввода, вывода и хранения информации
(в БД), записанной на разных языках (см. ниже); • в качестве поддерживаемых языков выбрать минимум два: один на основе
кириллицы, другой на основе латиницы.
7. Архитектура приложения должна соответствовать шаблону Мус.
8. При реализации алгоритмов бизнес-ЛОГИКИ ИСПОЛЬЗовать шаблоны.
9. Используя сервлеты и JSP, реализовать функциональность, приведенную в постановке задачи.
10. В качестве контейнера сервлетов использовать Apache Tomcat.
11. На страницах JSP применять теги из библиотеки JSTL и разработанные собственные теги (минимум
один сuѕtоm tag library тег и минимум один tag file тег).
12. При разработке использовать сессии, фильтры, слушатели.
13. Использовать журналирование событий с использованием библиотеки Log4j или Logback.
14. Код должен содержать комментарии документатора (все классы верхнего уровня, нетривиальные
методы и конструкторы).
15. Написать модульные тесты которые по максимуму покрывают функциональность.
16. Самостоятельное расширение постановки задачи по функциональности приветствуется.

Дополнительно, к требованиям изложенным выше, более чем желательно обеспечить выполнение следующих требований.

1. Реализовать разграничение прав доступа пользователей системы к компонентам приложения.
2. Реализовать защиту от повторной отправки данных на сервер при обновлении страницы.
3. Все поля ввода должны быть с валидацией данных.
Далее идет словесное описание бизнес области (у каждого своя область).
